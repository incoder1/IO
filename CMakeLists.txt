cmake_minimum_required(VERSION 3.4)

project(io CXX)

include(CMakeDependentOption)
include(CTest)

include_directories(include)
include_directories(include/net)
include_directories(include/tls)
# for pre-compiled headers
include_directories(src)

file(GLOB PROJECT_SOURCE_PATH ${PROJECT_SOURCE_DIR}/src)
file(GLOB COMMON_SRC ${PROJECT_SOURCE_PATH}/*.cpp ${PROJECT_SOURCE_PATH}/net/*.cpp)
file(GLOB TLS_SRC ${PROJECT_SOURCE_PATH}/tls/*.cpp)

# set type of OCCT libraries
if (NOT BUILD_LIBRARY_TYPE)
	set (BUILD_LIBRARY_TYPE "Shared" CACHE STRING "${BUILD_LIBRARY_TYPE_DESCR}" FORCE)
	SET_PROPERTY(CACHE BUILD_LIBRARY_TYPE PROPERTY STRINGS Shared Static)
endif()

if ("${BUILD_LIBRARY_TYPE}" STREQUAL "Shared")
	set (BUILD_SHARED_LIBS ON)
endif()

set(EXTRA_LIBS)
set(CMAKE_BINARY_DIR target)

if( WIN32 OR MSYS OR CYGWIN)
	message( STATUS "Building IO for Microsoft Windows")
	include_directories(include/win)
	file(GLOB PLATFORM_SRC ${PROJECT_SOURCE_PATH}/win/*.cpp)
	if(MSVC)
		add_definitions(/D "_WIN32_WINNT=0x0A00" /D "_UNICODE" /D "UNICODE")
		list(APPEND EXTRA_LIBS AdvAPI32)
	else()
		add_definitions(-D_WIN32_WINNT=0x0A00 -D_UNICODE -DUNICODE)
	endif()
	if(MSYS OR CYGWIN)
		set(THREADING threadwin)
	endif()
	list(APPEND EXTRA_LIBS Ws2_32)
elseif( UNIX AND NOT WIN32 AND NOT MSYS AND NOT CYGWIN)
	message( STATUS "Building IO for UNIX/POSIX ")
	include_directories(include/posix)
	file(GLOB PLATFORM_SRC ${PROJECT_SOURCE_PATH}/posix/*.cpp)
	set(THREADING thread)
	list(APPEND EXTRA_LIBS pthread)
endif()

find_package(Boost 1.23.0)
if(Boost_FOUND)
	include_directories(${Boost_INCLUDE_DIRS})
	if(MSVC)
		add_definitions(/DIO_HAS_BOOST)
	else()
		add_definitions(-DIO_HAS_BOOST)
	endif()
endif()

# Dependencies
if(MSVC)
	set(Iconv_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/deps/msvc/include")
	set(GNUTLS_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/deps/msvc/include")
	link_directories(io "${PROJECT_SOURCE_DIR}/deps/msvc/lib/${CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE}")
	set(Iconv_LIBRARY iconv)
	set(GNUTLS_LIBRARIES gnutls)
elseif(CMAKE_COMPILER_IS_GNUCXX)
	if(WIN32)
		find_package(Iconv REQUIRED)
	else()
		set(Iconv_INCLUDE_DIR "")
		set(Iconv_LIBRARY "")
	endif()
	find_package(GnuTLS 3.6.5 REQUIRED)
endif()

include_directories(${Iconv_INCLUDE_DIR})
list(APPEND EXTRA_LIBS ${Iconv_LIBRARY})
include_directories(${GNUTLS_INCLUDE_DIR})
list(APPEND EXTRA_LIBS ${GNUTLS_LIBRARIES})

if( ${CMAKE_BUILD_TYPE} STREQUAL "Release" )
	if(MSVC)
		add_definitions(/D "NDEBUG")
	elseif(CMAKE_COMPILER_IS_GNUCXX)
		add_definitions(-DNDEBUG)
	endif()
	set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/${CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE}/lib)
elseif(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
	set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/${CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE}/lib)
endif()

if(BUILD_SHARED_LIBS)
	add_library(io SHARED ${COMMON_SRC} ${TLS_SRC} ${PLATFORM_SRC})
	if(MSVC)
		add_definitions(/D "IO_SHARED_LIB" /D "IO_BUILD" /D "_USRDLL" /D "_WINDLL")
	elseif(CMAKE_COMPILER_IS_GNUCXX)
		add_definitions(-DIO_SHARED_LIB -DIO_BUILD)
		if(WIN32)
			add_definitions(-D_USRDLL -D_WINDLL)
		endif()
	endif()
else()
	add_library(io STATIC ${COMMON_SRC} ${TLS_SRC} ${PLATFORM_SRC})
endif()

if( CMAKE_COMPILER_IS_GNUCXX )

	set(CMAKE_CXX_EXTENSIONS ON)

	target_link_libraries(io ${EXTRA_LIBS})
	target_precompile_headers(io PRIVATE ${PROJECT_SOURCE_PATH}/stdafx.hpp)
	set_target_properties(io PROPERTIES LINKER_LANGUAGE CXX)

	if( ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")
		set(CPU_SPECIFIC_FLAGS "-minline-stringops-dynamically -mavx -mavx2 -mlzcnt -mmovbe")
	elseif(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "i686")
		set(CPU_SPECIFIC_FLAGS "-minline-stringops-dynamically -sse2")
	else()
		set(CPU_SPECIFIC_FLAGS "")
	endif()

	set(RELEASE_OPTIMIZE_FLAGS "-mtune=generic -O3 -fdeclone-ctor-dtor -fdevirtualize-at-ltrans -fwhole-program ${CPU_SPECIFIC_FLAGS}")

	if(NO_EXCEPTIONS)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-exceptions")
	endif()

	if(NO_RTTI)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti")
	endif()

	if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 9.0)
		set (CMAKE_CXX_STANDARD 20)
	elseif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 4.9)
		set (CMAKE_CXX_STANDARD 17)
	elseif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 4.8)
		set (CMAKE_CXX_STANDARD 14)
	elseif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 4.1)
		set (CMAKE_CXX_STANDARD 11)
	else()
		message( SEND_ERROR "GCC 4.2+ required")
	endif()

	if(BUILD_SHARED_LIBS)
		set(LTO_FLAGS "-flto")
		if(WIN32 OR MSYS OR CYGWIN)
			set(LTO_FLAGS "${LTO_FLAGS} -Wl,-allow-multiple-definition")
		endif()
		set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} ${LTO_FLAGS}")
		set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS} -s ${LTO_FLAGS} ${RELEASE_OPTIMIZE_FLAGS}")
		set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} ${LTO_FLAGS} ${RELEASE_OPTIMIZE_FLAGS}")
	else()
		set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} ${RELEASE_OPTIMIZE_FLAGS}" )
	endif()

	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} -g -Og")

endif(CMAKE_COMPILER_IS_GNUCXX)

if(MSVC)

	target_precompile_headers(io PRIVATE "$<$<COMPILE_LANGUAGE:CXX>:${PROJECT_SOURCE_PATH}/stdafx.hpp>")

	target_link_libraries(io ${EXTRA_LIBS})

	set(SUPPRESS_WARNINGS "/wd4828")

	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /c /nologo /utf-8 /std:c++latest /permissive- /Zc:wchar_t /")

	if( ${CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE} STREQUAL "x64" )
		set(CPU_SPECIFIC_FLAGS "/arch:AVX2")
	endif()

	set(OPTIMIZE_FLAGS "/O2 /sdl /Oi ${CPU_SPECIFIC_FLAGS}")

	if(BUILD_SHARED_LIBS)
	#	set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
		set(SUPPRESS_WARNINGS "${SUPPRESS_WARNINGS} /wd4275 /wd4251 /wd4589")
		set(MANIFEST_SETTING "/MANIFEST /MANIFESTUAC:NO /ManifestFile:\"${LIBRARY_OUTPUT_PATH}/io.dll.intermediate.manifest\" ")
		set(UCRT "/DYNAMICBASE /DEFAULTLIB:ucrt.lib /DEFAULTLIB:vcruntime.lib /DEFAULTLIB:msvcprt.lib")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4 ${SUPPRESS_WARNINGS}")
		set(CMAKE_CXX_FLAGS_RELEASE  "${CMAKE_CXX_FLAGS} ${OPTIMIZE_FLAGS} /GL /GS /GT /W3 /Gy /Zi /Gm-")
		set(CMAKE_SHARED_LINKER_FLAGS "/DLL /NXCOMPAT /SUBSYSTEM:WINDOWS ${MANIFEST_SETTING}")
		set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS} /INCREMENTAL:NO /LTCG /OPT:REF /TLBID:1 ${UCRT}")
		set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} /LDd /MDd")
	else()
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4 ${SUPPRESS_WARNINGS}")
		set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} /MD /O2")
		set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} /MDd")
	endif()


	if(NOT NO_EXCEPTIONS)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc")
	endif()

	if(NOT NO_RTTI)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /GR")
	else()
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /GR-")
	endif()

	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} /ZI")

endif(MSVC)

if(RUN_TESTS)
	# Locate GTest
	find_package(GTest REQUIRED)
	include_directories(${GTest_INCLUDE_DIRS})
	if(IO_SHARED_LIB)
		if(MSVC)
			add_definitions(/DIO_SHARED_LIB)
			add_definitions(/DUNICODE)
		else()
			add_definitions(-DIO_SHARED_LIB)
			add_definitions(-DUNICODE)
		endif()
		if(WIN32)
			set(RUNTIME_PATH "$ENV{PATH};${LIBRARY_OUTPUT_PATH}")
			set_tests_properties(io_gtests PROPERTIES ENVIRONMENT  "PATH=${RUNTIME_PATH}")
		elseif(UNIX)
			set(RUNTIME_PATH "$ENV{LD_LIBRARY_PATH};${SO_DIR}")
			set_tests_properties(io_gtests PROPERTIES ENVIRONMENT "LD_LIBRARY_PATH=${RUNTIME_PATH}")
		endif()
	endif()
	if( ${CMAKE_BUILD_TYPE} STREQUAL "Release" )
		if(MSVC)
			add_definitions(/DNDEBUG)
		else()
			add_definitions(-DNDEBUG)
		endif()
	endif()
	link_directories(${LIBRARY_OUTPUT_PATH})
	file(GLOB TEST_SRC ${PROJECT_SOURCE_DIR}/test/*.cpp)
	add_executable(io-gtest-suite ${TEST_SRC})
	target_link_libraries(io-gtest-suite PRIVATE io  ${GTEST_BOTH_LIBRARIES})
	set_target_properties(io-gtest-suite PROPERTIES LINKER_LANGUAGE CXX)
	enable_testing()
  	add_test(NAME io-check
    	COMMAND io-gtest-suite
    	WORKING_DIRECTORY ${LIBRARY_OUTPUT_PATH})

	add_custom_command(
				   TARGET io-gtest-suite
				   COMMENT "Run tests"
                   POST_BUILD
                   COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure )
endif()
