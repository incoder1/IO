CC=gcc
CXX=g++
AS=g++
AR=ar 

TARGET_ROOT = ./target
TARGET = $(TARGET_ROOT)/release-win-gcc-static-x64
OBJ_ROOT = obj
OBJ ?= $(OBJ_ROOT)/release-win-gcc-static-x64

LIB_NAME=libio

LIBS?=-liconv.dll -lgnutls.dll -lWs2_32
INCLUEDS?=-Iinclude -Iinclude/win -Iinclude/net -Isrc
MMX_AND_SSE?= -mmmx -msse -msse2 -mssse3 -msse3 -msse4 -mavx
OPTIMIZE?=-mtune=generic -O3 -fno-exceptions -fno-rtti -minline-stringops-dynamically -fdeclone-ctor-dtor -fdevirtualize-at-ltrans -mmovbe $(MMX_AND_SSE)
SHARED-DEFINES?=-DIO_BUILD
DEFINES ?= -DNDEBUG $(SHARED-DEFINES)
CPPFLAGS?= -std=gnu++14 -fno-exceptions -fno-rtti -Winline -pedantic $(OPTIMIZE) $(INCLUEDS)
LDFLAGS?= $(LIBS)


MODULES=. win net

SRC_DIR := $(addprefix ./src/,$(MODULES))
SOURCE_FILES := $(foreach sdir,$(SRC_DIR),$(wildcard $(sdir)/*.cpp))
OBJ_FILES := $(addprefix $(OBJ)/, $(notdir $(SOURCE_FILES:.cpp=.o)) )
 
DESTDIR?=target
 
all: clean link

link: compile
	$(AR) -r -s $(TARGET)/$(LIB_NAME).a $(OBJ_FILES)
		
compile: $(OBJ)/stdafx.hpp.gch $(OBJ_FILES) 

$(OBJ)/stdafx.hpp.gch: src/stdafx.hpp
	$(CXX) $(CPPFLAGS) $(DEFINES) -c src/stdafx.hpp -o $(OBJ)/stdafx.hpp.gch
	
$(OBJ)/%.o: src/%.cpp
	$(CXX) $(CPPFLAGS) $(DEFINES) -iquoteobj$(OBJ)/stdafx.hpp.gch -c $< -o $@
	
$(OBJ)/%.o: src/win/%.cpp
	$(CXX) $(CPPFLAGS) $(DEFINES) -iquoteobj$(OBJ)/stdafx.hpp.gch  -c $< -o $@

$(OBJ)/%.o: src/net/%.cpp
	$(CXX) $(CPPFLAGS) $(DEFINES) -iquoteobj$(OBJ)/stdafx.hpp.gch -c $< -o $@
	
clean:
	mkdir -p $(OBJ_ROOT)
	mkdir -p $(TARGET_ROOT)
	rm -rf $(OBJ)
	rm -rf $(TARGET)
	mkdir $(OBJ)
	mkdir $(TARGET)